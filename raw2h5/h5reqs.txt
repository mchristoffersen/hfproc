With X2h5 function build a dict named dd with the following fields:

Chirp:
	dd["txCF"]
	dd["txBW"]
	dd["txlen"]
	dd["txPRF"]

Tone:
	dd["txCF"]
	dd["txlen"]
	dd["txPRF"]

Impulse:
	dd["txCF"]
	dd["txPRF"]

All:
	dd["sig"] - signal type (impulse, tone, chirp)

	dd["stack"] - stacking of rx0 data
	dd["spt"] - samples per trace
	dd["ntrace"] - number of traces
	dd["trlen"] - trace len in time
	dd["fs"] - sampling frequency 

	dd["rx0"] - received data array

	dd["lat"] - latitude array
	dd["lon"] - longitude array
	dd["alt"] - altitude array

	dd["tfull"] - time array full secs
	dd["tfrac"] - time array frac secs


From raw data file

hdf5 structure:

raw - data straight from the raw files
ext - externally supplied data
drv - derived data products

In raw:

tx0
 -Chirp bandwidth
 -Chirp center freq
 -Chirp length
 -Pulse repetition freq
 -Synthetic chirp
rx0
 -Sampling frequency
 -Stacking
 -Any correction note
 -Number of traces (redundant)
 -Samples per trace (redundant)
 -Trace length (redundant)
time0
 -Source
 -UTC struct
 -struct {
       fracSecond (double precision floating point)
       fullSecond (2 byte unsigned int - starts at 0)
       minute     (2 byte unsigned int - starts at 0)
       hour       (2 byte unsigned int - starts at 0)
       day        (2 byte unsigned int - starts at 1)
       month      (2 byte unsigned int - starts at 1)
       year       (2 byte unsigned int)
  }    
loc0
 -Initial navigation data
 -EPSG CRS
 -At least lat,lon,elev (or x,y,z)

In ext:

nav0
 -Improved navigation from lidar
 -Notes about correction and source
 -EPSG CRS
 -At least lat,lon,elev (or x,y,z)
srf0
 -Surface from ldidar
ref0
 -Reference chirp, externally supplied

In drv:
clutter0
 -Clutter simulations
proc0
 -Info about processing
pick:
 - Another group with per-pick dataset
